[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Tiny countdown with visual indicator",
    "type" : "Module",
    "Deprecated" : [

    ],
    "Constructor" : [

    ],
    "items" : [
      {
        "def" : "CountDown:pauseOrResume()",
        "stripped_doc" : [
          "Pause or resume the existing countdown."
        ],
        "name" : "pauseOrResume",
        "doc" : "Pause or resume the existing countdown.",
        "notes" : [

        ],
        "signature" : "CountDown:pauseOrResume()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Pause or resume the existing countdown.",
        "parameters" : [

        ]
      },
      {
        "def" : "CountDown:setProgress(progress)",
        "stripped_doc" : [
          "Set the progress of visual indicator to `progress`.",
          ""
        ],
        "name" : "setProgress",
        "doc" : "Set the progress of visual indicator to `progress`.\n\nParameters:\n * progress - an number specifying the value of progress (0.0 - 1.0)",
        "notes" : [

        ],
        "signature" : "CountDown:setProgress(progress)",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Set the progress of visual indicator to `progress`.",
        "parameters" : [
          " * progress - an number specifying the value of progress (0.0 - 1.0)"
        ]
      },
      {
        "def" : "CountDown:startFor(minutes)",
        "stripped_doc" : [
          "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.",
          ""
        ],
        "name" : "startFor",
        "doc" : "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.\n\nParameters:\n * minutes - How many minutes",
        "notes" : [

        ],
        "signature" : "CountDown:startFor(minutes)",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.",
        "parameters" : [
          " * minutes - How many minutes"
        ]
      }
    ],
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "def" : "CountDown:startFor(minutes)",
        "stripped_doc" : [
          "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.",
          ""
        ],
        "name" : "startFor",
        "doc" : "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.\n\nParameters:\n * minutes - How many minutes",
        "notes" : [

        ],
        "signature" : "CountDown:startFor(minutes)",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.",
        "parameters" : [
          " * minutes - How many minutes"
        ]
      },
      {
        "def" : "CountDown:pauseOrResume()",
        "stripped_doc" : [
          "Pause or resume the existing countdown."
        ],
        "name" : "pauseOrResume",
        "doc" : "Pause or resume the existing countdown.",
        "notes" : [

        ],
        "signature" : "CountDown:pauseOrResume()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Pause or resume the existing countdown.",
        "parameters" : [

        ]
      },
      {
        "def" : "CountDown:setProgress(progress)",
        "stripped_doc" : [
          "Set the progress of visual indicator to `progress`.",
          ""
        ],
        "name" : "setProgress",
        "doc" : "Set the progress of visual indicator to `progress`.\n\nParameters:\n * progress - an number specifying the value of progress (0.0 - 1.0)",
        "notes" : [

        ],
        "signature" : "CountDown:setProgress(progress)",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Set the progress of visual indicator to `progress`.",
        "parameters" : [
          " * progress - an number specifying the value of progress (0.0 - 1.0)"
        ]
      }
    ],
    "doc" : "Tiny countdown with visual indicator\n\nDownload: [https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/CountDown.spoon.zip](https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/CountDown.spoon.zip)",
    "name" : "CountDown"
  }
]